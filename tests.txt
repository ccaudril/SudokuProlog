Exemples 'listes.pl'
--------------------

longueur([1,2,3,4], Res).

concat([1,2], [3,4], Res).
concat(Res, [3,4], [1,2,3,4]).
concat([1,2], Res, [1,2,3,4]).

extractionElements(0, [1,2,3], Res1, Res2).
extractionElements(1, [1,2,3], Res1, Res2).
extractionElements(2, [1,2,3], Res1, Res2).

partition(1, [], Res).
partition(1, [1,2], Res).
partition(2, [1,2,3,4], Res).

premier([1,2,3], Res1, Res2).

t([], Res).
t([[1], [2]], Res).
t([[1,2], [3,4]], Res).

permut([1,2,3], Res).

modificationElement([1,2,3,4], 2, 9, Res).
modificationElement([1,2,3,4], 0, 9, Res).

element([4,3,1,9,8], 3, Res).
element([4,3,1,9,8], 5, Res).

existence(5, [1,4,6,5,2]).

suppression(6, [1,2,3,4,5,6], Res).

elementAleatoire([4,5,2,6,9,8], Res).

Exemples 'sudoku.pl'
--------------------

taille([1,2,3,4,5,6,7,8,9], Res).

tailleBloc(4, Res1, Res2).
tailleBloc(6, Res1, Res2).
tailleBloc(9, Res1, Res2).

extractionBlocs([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16], Res).

nombres(10, Res).

validation([[2,1,3,7,6,5,4,9,8]], [1,2,3,4,5,6,7,8,9]).

extraction([8,7,1,2,9,3,6,4,5,6,5,9,8,1,4,7,2,3,4,2,3,6,7,5,9,1,8,3,6,8,5,2,7,4,9,1,2,1,7,9,4,8,5,3,6,9,4,5,1,3,6,8,7,2,7,9,6,3,5,2,1,8,4,1,8,2,4,6,9,3,5,7,5,3,4,7,8,1,2,6,9], Lignes, Colonnes, Blocs).

Résolution avec différentes tailles :

4x4 :
1 seule solution :
[1,2,_,_,_,4,_,_,_,_,1,_,_,_,3,2]
plusieurs solutions :
[1,_,_,_,_,_,_,1,_,_,1,_,_,1,_,_]

6x6 :
1 seule solution :
[6,4,_,2,_,_,_,5,1,_,_,_,3,6,4,_,_,2,5,_,_,4,3,6,_,_,_,6,4,_,_,_,6,_,2,5]

9x9 :
1 seule solution :
[_,_,_,5,3,1,9,7,2,_,_,_,6,7,2,1,8,4,_,_,_,8,9,4,6,3,5,2,7,3,_,_,_,5,1,6,8,5,9,_,_,_,2,4,3,4,6,1,_,_,_,7,9,8,1,8,6,7,5,3,4,2,9,3,2,4,9,1,6,8,5,7,5,9,7,2,4,8,3,6,1]
Plusieurs solutions :
[_,_,4,9,6,8,5,7,2,_,_,6,4,5,7,1,3,8,_,_,7,3,1,2,6,4,9,_,_,9,8,3,6,4,2,1,_,_,1,5,2,9,7,8,6,_,_,8,7,4,1,3,9,5,_,_,5,2,9,4,8,1,3,_,_,2,6,8,3,9,5,7,_,_,3,1,7,5,2,6,4]

16x16 : trop long
[1,4,_,3,_,_,6,_,15,9,_,7,_,_,_,_,5,2,13,12,1,4,_,_,11,14,_,16,15,_,_,_,_,15,9,_,5,2,13,_,_,_,_,3,_,_,6,16,_,11,14,_,_,_,_,_,_,2,_,12,1,_,10,_,_,1,4,10,_,_,14,_,7,_,9,_,5,2,_,12,12,5,2,13,_,1,4,_,16,_,14,_,_,_,_,_,8,7,_,9,12,_,_,13,3,_,_,_,16,11,14,_,_,16,11,_,8,7,15,_,12,_,2,13,3,1,_,_,10,3,_,_,6,16,11,14,_,7,15,_,12,_,_,13,13,12,_,2,10,3,_,_,_,16,11,14,8,7,_,_,_,8,_,_,13,_,_,2,10,_,1,_,6,_,11,14,14,_,_,11,9,_,_,_,13,12,5,2,_,_,_,4,_,10,_,1,14,_,_,11,9,8,7,15,13,_,5,2,_,_,12,_,_,_,3,1,_,6,16,11,_,8,7,_,_,_,8,7,2,_,12,_,_,_,3,_,14,6,_,_,11,14,_,16,15,9,_,7,_,13,_,_,_,_,_,_]

validationModification(0, 6, [_,_,_,5,3,1,9,7,2,_,_,_,6,7,2,1,8,4,_,_,_,8,9,4,6,3,5,2,7,3,_,_,_,5,1,6,8,5,9,_,_,_,2,4,3,4,6,1,_,_,_,7,9,8,1,8,6,7,5,3,4,2,9,3,2,4,9,1,6,8,5,7,5,9,7,2,4,8,3,6,1]).
validationModification(0, 5, [_,_,_,5,3,1,9,7,2,_,_,_,6,7,2,1,8,4,_,_,_,8,9,4,6,3,5,2,7,3,_,_,_,5,1,6,8,5,9,_,_,_,2,4,3,4,6,1,_,_,_,7,9,8,1,8,6,7,5,3,4,2,9,3,2,4,9,1,6,8,5,7,5,9,7,2,4,8,3,6,1]).

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Déroulement extractionBlocs :

[S11, S12, S13, S14, S15, S16,
 S21, S22, S23, S24, S25, S26,
 S31, S32, S33, S34, S35, S36,
 S41, S42, S43, S44, S45, S46,
 S51, S52, S53, S54, S55, S56,
 S61, S62, S63, S64, S65, S66,

Largeur = 3
Hauteur = 2

Etape 1 :
[[S11, S12, S13, S14, S15, S16],
         [S21, S22, S23, S24, S25, S26]]

Etape 2 :
T = [[S11, S21], [S12, S22], [S13, S23], [S14, S24], [S15, S25], [S16, S26]]

F = [S11, S21, S12, S22, S13, S23, S14, S24, S15, S25, S16, S26]

Taille = 6

S = [[S11, S21, S12, S22, S13, S23], [S14, S24, S15, S25, S16, S26]]
  = première ligne de blocs

...

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Procédure de génération aléatoire de grilles :

Pour la génération aléatoire de grilles, on ne propose que la taille 9x9. Parce que sinon, faut définir à chaque fois les niveaux de difficulté, et c'est chiant.

On propose 3 niveaux de difficultés, définis par le nombre de valeurs données dans la grille :
  - Facile : entre 36 et 46 (entre 35 et 45 cases vides)
  - Intermédiaire : entre 32 et 35 (entre 46 et 49 cases vides)
  - Difficile : entre 25 et 31 (entre 50 et 56 cases vides)
Voir http://shodhganga.inflibnet.ac.in/bitstream/10603/97233/7/th-1811ch5.pdf

On procède en 2 temps :
(1) On génère une grille valide complète
(2) On supprime des cellules dans cette grille

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Numéros de la ligne, de la colonne et du bloc d'une case

[  0,  1,  2|,  3,  4,  5|,  6,  7,  8]
[  9, 10, 11|, 12, 13, 14|, 15, 16, 17]
[ 18, 19, 20|, 21, 22, 23|, 24, 25, 26]
 -----0-----  -----1-----  -----2-----
[ 27, 28, 29|, 30, 31, 32|, 33, 34, 35]
[ 36, 37, 38|, 39, 40, 41|, 42, 43, 44]
[ 45, 46, 47|, 48, 49, 50|, 51, 52, 53]
 -----3-----  -----4-----  -----5-----
[ 54, 55, 56|, 57, 58, 59|, 60, 61, 62]
[ 63, 64, 65|, 66, 67, 68|, 69, 70, 71]
[ 72, 73, 74|, 75, 76, 77|, 78, 79, 80]
 -----6-----  -----7-----  -----8-----

Ligne : I is Ind // N,
Colonne : J is Ind mod N.
Bloc : K is floor((Ind mod 9) / 3) + 3 * floor(Ind / (9 * 3))
Indice : Ind is J + I * 9